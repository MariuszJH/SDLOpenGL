name: Build with CMakePresets.json cache SDL2 install!

on:
  push: 
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  SDL_VERSION: 2.28.5
  
jobs:
  singleConfig:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        preset:
        # single config generators
          - Ninja-Msvc-Debug
          - Ninja-Gnu-Debug
          - Ninja-Clang-Debug

        exclude:
        # Ubuntu doesn't have MSVC compiler
          - os: ubuntu-latest
            preset: Ninja-Msvc-Debug

          - os: macos-latest
            preset: Ninja-Gnu-Debug
          - os: macos-latest
            preset: Ninja-Msvc-Debug

          - os: windows-latest
            preset: Ninja-Gnu-Debug
          - os: windows-latest
            preset: Ninja-Clang-Debug

    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install MSVC compiler
      if: ${{matrix.os == 'windows-latest'}}
      uses: ilammy/msvc-dev-cmd@v1
        
    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

# Do not cache SDL2 on Linux because it is tied to too many dependencies which would also need to be cached 

    - name: Cache SDL2 on Mac (if not yet cached) or else restore it from cache (if cached already)
      if: ${{matrix.os == 'macos-latest'}}
      id: mac-SDL2-ID-installed-cache1
      uses: actions/cache@v3
      with:
        path: /usr/local/Cellar/sdl2
        key: mac-SDL2-KEY-installed-cache1

    - name: Install SDL2 on Linux if it is not yet cached
      if: ${{matrix.os == 'ubuntu-latest'}}
      run: |
          echo sudo apt-get update
          sudo apt-get update
          echo sudo apt-get install libsdl2-dev
          sudo apt-get install libsdl2-dev

          echo find /usr/include/SDL2 -iname SDL.h
          find /usr/include/SDL2 -iname SDL.h
          echo find /usr/lib/x86_64-linux-gnu -iname libSDL2.a
          find /usr/lib/x86_64-linux-gnu -iname libSDL2.a
          echo find /usr/lib/x86_64-linux-gnu -iname libSDL2.so
          find /usr/lib/x86_64-linux-gnu -iname libSDL2.so
          echo find /usr/lib/x86_64-linux-gnu/cmake/SDL2 -iname SDL2?Config.cmake
          find /usr/lib/x86_64-linux-gnu/cmake/SDL2 -iname SDL2?Config.cmake
          
          echo ls /usr/include/SDL2
          ls /usr/include/SDL2
          echo ls /usr/lib/x86_64-linux-gnu
          ls /usr/lib/x86_64-linux-gnu
          echo ls /usr/lib/x86_64-linux-gnu/cmake/SDL2
          ls /usr/lib/x86_64-linux-gnu/cmake/SDL2

    - name: Install SDL2 on Mac if it is not yet cached
      # if: steps.mac-SDL2-ID-installed-cache1.outputs.cache-hit != 'true'
      if: ${{matrix.os == 'macos-latest'}}
      run: |
        if [[ ${{steps.mac-SDL2-ID-installed-cache1.outputs.cache-hit != 'true'}} == "true" ]]; then
          echo brew install sdl2
          brew install sdl2

          find /usr/local/Cellar/sdl2 -iname SDL.h
          find /usr/local/Cellar/sdl2 -iname libSDL2.a
          find /usr/local/Cellar/sdl2 -iname libSDL2.so
          find /usr/local/Cellar/sdl2 -iname SDL2?Config.cmake
          
          echo ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
          ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
          echo ls /usr/local/Cellar/sdl2/2.28.5/lib
          ls /usr/local/Cellar/sdl2/2.28.5/lib
          echo ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
          ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
        else
          echo nothing here 1
        fi

    - name: Restore SDL2 on Mac from cache; do not reinstall it!
      if: steps.mac-SDL2-ID-installed-cache1.outputs.cache-hit == 'true'
      run: |
        echo YES cached!
        find /usr/local/Cellar/sdl2 -iname SDL.h
        find /usr/local/Cellar/sdl2 -iname libSDL2.a
        find /usr/local/Cellar/sdl2 -iname libSDL2.so
        find /usr/local/Cellar/sdl2 -iname SDL2?Config.cmake
        
        echo ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
        ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
        echo ls /usr/local/Cellar/sdl2/2.28.5/lib
        ls /usr/local/Cellar/sdl2/2.28.5/lib
        echo ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
        ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2

    # - name: Install SDL2 on Linux/Mac if it is not yet cached
    #   if: ${{matrix.os != 'windows-latest'}}
    #   shell: bash
    #   run: |
    #     if [[ ${{matrix.os == 'ubuntu-latest'}} == "true" ]]; then
    #       echo sudo apt-get install libsdl2-dev
    #       sudo apt-get install libsdl2-dev

    #       echo find /usr/include/SDL2 -iname SDL.h
    #       find /usr/include/SDL2 -iname SDL.h
    #       echo find /usr/lib/x86_64-linux-gnu -iname libSDL2.a
    #       find /usr/lib/x86_64-linux-gnu -iname libSDL2.a
    #       echo find /usr/lib/x86_64-linux-gnu -iname libSDL2.so
    #       find /usr/lib/x86_64-linux-gnu -iname libSDL2.so
    #       echo find /usr/lib/x86_64-linux-gnu/cmake/SDL2 -iname SDL2?Config.cmake
    #       find /usr/lib/x86_64-linux-gnu/cmake/SDL2 -iname SDL2?Config.cmake
          
    #       echo ls /usr/include/SDL2
    #       ls /usr/include/SDL2
    #       echo ls /usr/lib/x86_64-linux-gnu
    #       ls /usr/lib/x86_64-linux-gnu
    #       echo ls /usr/lib/x86_64-linux-gnu/cmake/SDL2
    #       ls /usr/lib/x86_64-linux-gnu/cmake/SDL2

        # elif [[ ${{matrix.os == 'macos-latest'}} == "true" ]]; then
        #   echo brew install sdl2
        #   brew install sdl2

        #   find /usr/local/Cellar/sdl2 -iname SDL.h
        #   find /usr/local/Cellar/sdl2 -iname libSDL2.a
        #   find /usr/local/Cellar/sdl2 -iname libSDL2.so
        #   find /usr/local/Cellar/sdl2 -iname SDL2?Config.cmake
          
        #   echo ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
        #   ls /usr/local/Cellar/sdl2/2.28.5/include/SDL2
        #   echo ls /usr/local/Cellar/sdl2/2.28.5/lib
        #   ls /usr/local/Cellar/sdl2/2.28.5/lib
        #   echo ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
        #   ls /usr/local/Cellar/sdl2/2.28.5/lib/cmake/SDL2
        # fi

    - name: Cache SDL2 on Windows (if not yet cached) or else restore it from cache (if cached already)
      if: ${{matrix.os == 'windows-latest'}}
      id: windows-SDL2-ID-installed-cache1
      uses: actions/cache@v3
      with:
        path: C:\SDL2
        key: windows-SDL2-KEY-installed-cache1

    - name: Install SDL2 on Windows if it is not yet cached
      # if: steps.windows-SDL2-ID-installed-cache1.outputs.cache-hit != 'true'
      if: ${{matrix.os == 'windows-latest'}}
      shell: bash
      run: |
        if [[ ${{steps.windows-SDL2-ID-installed-cache1.outputs.cache-hit != 'true'}} == "true" ]]; then
          echo unzipping
          curl -o SDL.zip "https://github.com/libsdl-org/SDL/releases/download/release-$env:SDL_VERSION/SDL2-devel-$env:SDL_VERSION-VC.zip"
          echo find -name SDL.zip
          find -name SDL.zip
          7z x SDL.zip -o ~/SDL2
          
          echo ls ~/SDL2 -Include SDL.h -Recurse -Name
          ls ~/SDL2 -Include SDL.h -Recurse -Name
          echo ls ~/SDL2 -Include SDL2.lib -Recurse -Name
          ls ~/SDL2 -Include SDL2.lib -Recurse -Name
          echo ls ~/SDL2 -Include SDL2.dll -Recurse -Name
          ls ~/SDL2 -Include SDL2.dll -Recurse -Name
          echo ls ~/SDL2 -Include SDL2?Config.cmake -Recurse -Name
          ls ~/SDL2 -Include SDL2?Config.cmake -Recurse -Name

          echo ls ~/SDL2/SDL2-2.28.5/include -Name
          ls ~/SDL2/SDL2-2.28.5/include -Name
          echo ls ~/SDL2/SDL2-2.28.5/lib/x86 -Name
          ls ~/SDL2/SDL2-2.28.5/lib/x86 -Name
          echo ls ~/SDL2/SDL2-2.28.5/lib/x64 -Name
          ls ~/SDL2/SDL2-2.28.5/lib/x64 -Name
          echo ls ~/SDL2/SDL2-2.28.5/cmake -Name
          ls ~/SDL2/SDL2-2.28.5/cmake -Name
        fi

    - name: Restore SDL2 on Windows from cache; do not reinstall it!
      if: steps.windows-SDL2-ID-installed-cache1.outputs.cache-hit == 'true'
      shell: powershell
      run: |
        echo YES cached!
        ls C:\SDL2 -Include SDL.h -Recurse -Name
        ls C:\SDL2 -Include SDL2.lib -Recurse -Name
        ls C:\SDL2 -Include SDL2.dll -Recurse -Name
        ls C:\SDL2 -Include SDL2?Config.cmake -Recurse -Name

        echo ls C:\SDL2\SDL2-2.28.5\include -Name
        ls C:\SDL2\SDL2-2.28.5\include -Name
        echo ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x86 -Name
        echo ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        ls C:\SDL2\SDL2-2.28.5\lib\x64 -Name
        echo ls C:\SDL2\SDL2-2.28.5\cmake -Name
        ls C:\SDL2\SDL2-2.28.5\cmake -Name

    - name: Tool versions
      shell: bash
      run: |
        if [[ ${{matrix.os == 'windows-latest'}} == "true" ]]; then
          echo cl
          cl
          echo
        fi
        echo g++ --version
        g++ --version
        echo 
        echo clang++ --version
        clang++ --version
        echo 
        echo cmake --version
        cmake --version
        echo 
        echo ninja --version
        ninja --version

    - name: Parameter values
      shell: bash
      run: | 
        echo platform = ${{runner.os}}
        echo preset = ${{matrix.preset}}

    - name: CMake configure
      run: cmake --preset ${{matrix.preset}}
      
    - name: CMake build
      run: cmake --build --preset ${{matrix.preset}}


    # - name: Install SDL2 on Linux/Mac if it is not yet cached
    #   if: ${{matrix.os != 'windows-latest'}}
    #   shell: bash
    #   run: |
    #     if [[ ${{matrix.os == 'ubuntu-latest'}} == "true" ]] && [[ steps.windows-SDL2-ID-installed-cache.outputs.cache-hit != 'true' ]]; then
    #       echo sudo apt-get install libsdl2-dev
    #       sudo apt-get install libsdl2-dev
